var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import PluginDriver from './PluginDriver';
var defaultRuntimeOptions = {
    platform: '',
    pxToRpx: true,
    hostComponents: {},
    debug: false,
    appEvents: [],
    pageEvents: {},
    pluginDriver: new PluginDriver([]),
    history: {},
};
var runtimeOptions = defaultRuntimeOptions;
function merge() {
    var options = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        options[_i] = arguments[_i];
    }
    return options.reduce(function (acc, option) {
        var _a, _b, _c;
        acc.appEvents = option.appEvents || acc.appEvents;
        acc.debug = (_a = option.debug) !== null && _a !== void 0 ? _a : acc.debug;
        acc.history = option.history || acc.history;
        Object.keys((_b = option.hostComponents) !== null && _b !== void 0 ? _b : {}).forEach(function (k) {
            var _a, _b, _c, _d, _e, _f, _g;
            var inputHostComponent = (_a = option.hostComponents) === null || _a === void 0 ? void 0 : _a[k];
            acc.hostComponents[k] = (_b = acc.hostComponents[k]) !== null && _b !== void 0 ? _b : {};
            acc.hostComponents[k].additional = (_c = inputHostComponent === null || inputHostComponent === void 0 ? void 0 : inputHostComponent.additional) !== null && _c !== void 0 ? _c : acc.hostComponents[k].additional;
            acc.hostComponents[k].alias = Object.assign((_d = acc.hostComponents[k].alias) !== null && _d !== void 0 ? _d : {}, (_e = inputHostComponent === null || inputHostComponent === void 0 ? void 0 : inputHostComponent.alias) !== null && _e !== void 0 ? _e : {});
            acc.hostComponents[k].props = Array.from(new Set(__spread(((_f = acc.hostComponents[k].props) !== null && _f !== void 0 ? _f : []), ((_g = inputHostComponent === null || inputHostComponent === void 0 ? void 0 : inputHostComponent.props) !== null && _g !== void 0 ? _g : []))));
        });
        acc.pluginDriver = option.pluginDriver || acc.pluginDriver;
        acc.pageEvents = option.pageEvents || acc.pageEvents;
        acc.platform = option.platform || acc.platform;
        acc.pxToRpx = (_c = option.pxToRpx) !== null && _c !== void 0 ? _c : acc.pxToRpx;
        return acc;
    }, runtimeOptions);
}
export function apply(options) {
    runtimeOptions = merge(options);
}
export function get(key) {
    return runtimeOptions[key];
}
export function reset() {
    runtimeOptions = defaultRuntimeOptions;
}
