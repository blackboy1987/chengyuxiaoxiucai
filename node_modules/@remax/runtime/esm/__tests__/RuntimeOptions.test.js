import * as RuntimeOptions from '../RuntimeOptions';
import PluginDriver from '../PluginDriver';
describe('RuntimeOptions', function () {
    it('works correctly', function () {
        var _a, _b;
        RuntimeOptions.apply({
            pxToRpx: false,
            debug: false,
            hostComponents: {
                button: {
                    alias: {
                        onClick: 'onTap',
                    },
                    props: ['onTap'],
                },
            },
            pageEvents: {},
            appEvents: ['onShow'],
            history: 'history',
            pluginDriver: new PluginDriver([]),
        });
        RuntimeOptions.apply({
            pxToRpx: false,
            debug: false,
            hostComponents: {
                button: {
                    alias: {
                        className: 'class',
                    },
                    props: ['class'],
                },
            },
            pageEvents: {},
            appEvents: ['onShow', 'onHide'],
            history: 'history',
            pluginDriver: new PluginDriver([]),
        });
        expect(RuntimeOptions.get('pxToRpx')).toBe(false);
        expect(RuntimeOptions.get('history')).toBe('history');
        expect((_a = RuntimeOptions.get('hostComponents').button.alias) === null || _a === void 0 ? void 0 : _a.onClick).toBe('onTap');
        expect((_b = RuntimeOptions.get('hostComponents').button.alias) === null || _b === void 0 ? void 0 : _b.className).toBe('class');
        expect(RuntimeOptions.get('appEvents')).toEqual(['onShow', 'onHide']);
    });
});
