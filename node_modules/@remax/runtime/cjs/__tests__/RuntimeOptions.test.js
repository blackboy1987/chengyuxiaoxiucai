"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var RuntimeOptions = __importStar(require("../RuntimeOptions"));
var PluginDriver_1 = __importDefault(require("../PluginDriver"));
describe('RuntimeOptions', function () {
    it('works correctly', function () {
        var _a, _b;
        RuntimeOptions.apply({
            pxToRpx: false,
            debug: false,
            hostComponents: {
                button: {
                    alias: {
                        onClick: 'onTap',
                    },
                    props: ['onTap'],
                },
            },
            pageEvents: {},
            appEvents: ['onShow'],
            history: 'history',
            pluginDriver: new PluginDriver_1.default([]),
        });
        RuntimeOptions.apply({
            pxToRpx: false,
            debug: false,
            hostComponents: {
                button: {
                    alias: {
                        className: 'class',
                    },
                    props: ['class'],
                },
            },
            pageEvents: {},
            appEvents: ['onShow', 'onHide'],
            history: 'history',
            pluginDriver: new PluginDriver_1.default([]),
        });
        expect(RuntimeOptions.get('pxToRpx')).toBe(false);
        expect(RuntimeOptions.get('history')).toBe('history');
        expect((_a = RuntimeOptions.get('hostComponents').button.alias) === null || _a === void 0 ? void 0 : _a.onClick).toBe('onTap');
        expect((_b = RuntimeOptions.get('hostComponents').button.alias) === null || _b === void 0 ? void 0 : _b.className).toBe('class');
        expect(RuntimeOptions.get('appEvents')).toEqual(['onShow', 'onHide']);
    });
});
