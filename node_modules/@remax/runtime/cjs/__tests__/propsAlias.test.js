"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("@remax/types");
var propsAlias_1 = __importStar(require("../propsAlias"));
var RuntimeOptions = __importStar(require("../RuntimeOptions"));
describe('props alias', function () {
    beforeAll(function () {
        RuntimeOptions.apply({
            platform: types_1.Platform.ali,
            hostComponents: {
                foo: {
                    alias: {
                        camelCase: 'kebab-case',
                    },
                    props: ['kebab-case'],
                },
            },
        });
    });
    afterAll(function () {
        RuntimeOptions.reset();
    });
    it('transform className prop correctly', function () {
        expect(propsAlias_1.getAlias('className', 'any')).toBe('class');
        expect(propsAlias_1.default({
            className: 'class-name',
        }, 'any')).toEqual({
            class: 'class-name',
        });
    });
    it('transform style prop correctly', function () {
        expect(propsAlias_1.default({
            style: {
                color: '#ffffff',
                height: '2px',
                WebkitFlex: 1,
                '--color': 'red',
                '--textColor': 'blue',
                backgroundColor: 'var(--textColor)',
            },
        }, 'any')).toMatchSnapshot();
        expect(propsAlias_1.default({
            style: null,
        }, 'any')).toMatchSnapshot();
    });
    it('transform props by component type correctly', function () {
        expect(propsAlias_1.getAlias('prop', 'any')).toBe('prop');
        expect(propsAlias_1.default({
            bar: 'bar',
            camelCase: 'value',
        }, 'foo')).toEqual({
            bar: 'bar',
            'kebab-case': 'value',
        });
    });
    it('transform platform props', function () {
        expect(propsAlias_1.getAlias('ali-prop', 'any')).toBe('prop');
    });
});
