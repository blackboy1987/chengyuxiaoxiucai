"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.propAlias = exports.getAlias = void 0;
var plainStyle_1 = __importDefault(require("./utils/plainStyle"));
var RuntimeOptions = __importStar(require("./RuntimeOptions"));
function getAlias(prop, type) {
    var _a, _b;
    prop = prop.replace('className', 'class');
    var hostComponent = RuntimeOptions.get('hostComponents')[type];
    var prefix = RuntimeOptions.get('platform') + "-";
    // 判断是否是平台独有属性
    if (prop.startsWith(prefix)) {
        return prop.replace(new RegExp("^" + prefix), '');
    }
    return (_b = (_a = hostComponent === null || hostComponent === void 0 ? void 0 : hostComponent.alias) === null || _a === void 0 ? void 0 : _a[prop]) !== null && _b !== void 0 ? _b : prop;
}
exports.getAlias = getAlias;
function getValue(prop, value) {
    if (prop.toLowerCase().endsWith('style') && Object.prototype.toString.call(value) === '[object Object]') {
        return plainStyle_1.default(value);
    }
    return value;
}
function propAlias(prop, value, type) {
    return [getAlias(prop, type), getValue(prop, value)];
}
exports.propAlias = propAlias;
function propsAlias(props, type) {
    if (!props) {
        return props;
    }
    var aliasProps = {};
    for (var prop in props) {
        aliasProps[getAlias(prop, type)] = getValue(prop, props[prop]);
    }
    return aliasProps;
}
exports.default = propsAlias;
