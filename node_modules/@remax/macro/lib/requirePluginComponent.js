"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.nativeComponents = void 0;
var t = __importStar(require("@babel/types"));
var path = __importStar(require("path"));
var lodash_1 = require("lodash");
var insertImportDeclaration_1 = __importDefault(require("./utils/insertImportDeclaration"));
exports.nativeComponents = new Map();
function register(sourcePath, importer, assets) {
    if (importer === void 0) { importer = ''; }
    if (assets === void 0) { assets = []; }
    var component = Array.from(exports.nativeComponents.values()).find(function (c) { return c.sourcePath === sourcePath; });
    if (component) {
        component.assets = Array.from(new Set(__spreadArrays(component.assets, assets)));
        component.importers = Array.from(new Set(__spreadArrays(component.importers, [importer]).filter(Boolean)));
        return component.id;
    }
    var ext = path.extname(sourcePath);
    var basename = path.basename(sourcePath);
    var name = lodash_1.kebabCase(basename.replace(ext, ''));
    var num = 0;
    var id = name;
    while (exports.nativeComponents.has(id)) {
        id = name + num;
        num += 1;
    }
    exports.nativeComponents.set(id, {
        id: id,
        sourcePath: sourcePath,
        importers: [importer].filter(Boolean),
        assets: assets,
    });
    return id;
}
exports.register = register;
var PACKAGE_NAME = '@remax/runtime';
var FUNCTION_NAME = 'createNativeComponent';
function getName(callExpression) {
    var args = callExpression.node.arguments;
    var name = args[0];
    return name;
}
function requirePluginComponent(path, state) {
    var importer = state.file.opts.filename;
    var program = state.file.path;
    var functionName = insertImportDeclaration_1.default(program, FUNCTION_NAME, PACKAGE_NAME);
    var callExpression = path.findParent(function (p) { return t.isCallExpression(p); });
    var name = getName(callExpression);
    name.value = register(name.value, importer);
    callExpression.replaceWith(t.callExpression(t.identifier(functionName), [name]));
}
exports.default = requirePluginComponent;
