import * as t from '@babel/types';
import { Plugin, Meta, HostComponent, Platform, Options } from '@remax/types';
import Config from 'webpack-chain';
import { RuleConfig } from './build/webpack/config/css';
export default class API {
    plugins: Plugin[];
    adapter: {
        name: string;
        target: string;
        packageName: string;
        options: {};
    };
    meta: {
        global: string;
        template: {
            extension: string;
            tag: string;
            src: string;
        };
        style: string;
        jsHelper: {
            extension: string;
            tag: string;
            src: string;
        };
        include: {
            tag: string;
            src: string;
        };
    };
    getMeta(): Meta;
    getHostComponents(): Map<string, HostComponent>;
    processProps(componentName: string, props: string[], additional?: boolean, node?: t.JSXElement): string[];
    shouldHostComponentRegister(componentName: string, phase: 'import' | 'jsx' | 'extra', additional?: boolean): boolean;
    onBuildStart(config: Options): void;
    onAppConfig(config: any): any;
    onPageConfig({ page, config }: {
        page: string;
        config: any;
    }): any;
    configWebpack(params: {
        config: Config;
        webpack: any;
        addCSSRule: (ruleConfig: RuleConfig) => void;
    }): void;
    configBabel(params: {
        config: any;
    }): void;
    getRuntimePluginFiles(): (string | undefined)[];
    registerAdapterPlugins(targetName: Platform, one?: boolean): void;
    registerPlugins(plugins?: Plugin[]): void;
    private registerHostComponents;
}
