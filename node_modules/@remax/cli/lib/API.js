"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const macro_1 = require("@remax/macro");
const shared_1 = require("@remax/shared");
const lodash_1 = require("lodash");
class API {
    constructor() {
        this.plugins = [];
        this.adapter = {
            name: '',
            target: '',
            packageName: '',
            options: {},
        };
        this.meta = {
            global: '',
            template: {
                extension: '',
                tag: '',
                src: '',
            },
            style: '',
            jsHelper: {
                extension: '',
                tag: '',
                src: '',
            },
            include: {
                tag: '',
                src: '',
            },
        };
    }
    getMeta() {
        let meta = {
            global: '',
            template: {
                extension: '',
                tag: '',
                src: '',
            },
            style: '',
            jsHelper: {
                extension: '',
                tag: '',
                src: '',
            },
            ejs: {
                page: '',
            },
        };
        this.plugins.forEach(plugin => {
            meta = lodash_1.merge(meta, plugin.meta || {});
        });
        return meta;
    }
    getHostComponents() {
        return macro_1.hostComponents;
    }
    processProps(componentName, props, additional, node) {
        let nextProps = props;
        this.plugins.forEach(plugin => {
            if (typeof plugin.processProps === 'function') {
                nextProps = plugin.processProps({
                    componentName,
                    props: nextProps,
                    additional,
                    node,
                });
            }
        });
        return nextProps;
    }
    shouldHostComponentRegister(componentName, phase, additional) {
        return this.plugins.reduce((result, plugin) => {
            if (typeof plugin.shouldHostComponentRegister === 'function') {
                return plugin.shouldHostComponentRegister({
                    componentName,
                    additional,
                    phase,
                });
            }
            return result;
        }, true);
    }
    onBuildStart(config) {
        this.plugins.forEach(plugin => {
            if (typeof plugin.onBuildStart === 'function') {
                plugin.onBuildStart({ config });
            }
        });
    }
    onAppConfig(config) {
        return this.plugins.reduce((acc, plugin) => {
            if (typeof plugin.onAppConfig === 'function') {
                acc = plugin.onAppConfig({ config: acc });
            }
            return acc;
        }, config);
    }
    onPageConfig({ page, config }) {
        return this.plugins.reduce((acc, plugin) => {
            if (typeof plugin.onPageConfig === 'function') {
                acc = plugin.onPageConfig({ page, config: acc });
            }
            return acc;
        }, config);
    }
    configWebpack(params) {
        this.plugins.forEach(plugin => {
            if (typeof plugin.configWebpack === 'function') {
                plugin.configWebpack(params);
            }
        });
    }
    configBabel(params) {
        this.plugins.forEach(plugin => {
            if (typeof plugin.configBabel === 'function') {
                plugin.configBabel(params);
            }
        });
    }
    getRuntimePluginFiles() {
        return this.plugins
            .map(plugin => {
            if (typeof plugin.registerRuntimePlugin === 'function') {
                return shared_1.slash(plugin.registerRuntimePlugin());
            }
        })
            .filter(Boolean);
    }
    registerAdapterPlugins(targetName, one = false) {
        this.adapter.target = targetName;
        this.adapter.packageName = '@remax/' + targetName;
        const packagePath = this.adapter.packageName + '/node';
        let plugin = require(packagePath).default || require(packagePath);
        plugin = typeof plugin === 'function' ? plugin() : plugin;
        this.registerHostComponents(plugin.hostComponents);
        this.plugins.push(plugin);
    }
    registerPlugins(plugins = []) {
        plugins.forEach(plugin => {
            if (plugin) {
                this.registerHostComponents(plugin.hostComponents);
                this.plugins.push(plugin);
            }
        });
    }
    registerHostComponents(components) {
        if (!components) {
            return;
        }
        for (const key of components.keys()) {
            macro_1.hostComponents.set(key, components.get(key));
        }
    }
}
exports.default = API;
