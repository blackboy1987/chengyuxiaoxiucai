"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.getDefaultOptions = exports.buildWeb = exports.buildMini = exports.cli = exports.logger = void 0;
var output_1 = require("./build/utils/output");
Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return __importDefault(output_1).default; } });
const yargs_1 = __importDefault(require("yargs"));
const build_1 = require("./build");
exports.cli = yargs_1.default;
var mini_1 = require("./build/mini");
Object.defineProperty(exports, "buildMini", { enumerable: true, get: function () { return __importDefault(mini_1).default; } });
var web_1 = require("./build/web");
Object.defineProperty(exports, "buildWeb", { enumerable: true, get: function () { return __importDefault(web_1).default; } });
var defaultOptions_1 = require("./defaultOptions");
Object.defineProperty(exports, "getDefaultOptions", { enumerable: true, get: function () { return defaultOptions_1.getDefaultOptions; } });
function run(args, callback) {
    exports.cli = yargs_1.default
        .scriptName('remax')
        .usage('Usage: $0 <command> [options]')
        .command('build', '编译项目', 
    /* istanbul ignore next */
    () => {
        // ignore
    }, (argv) => {
        build_1.build(argv);
    });
    exports.cli
        .option('watch', {
        describe: '监听文件变化',
        alias: 'w',
        type: 'boolean',
        default: false,
    })
        .option('target', {
        describe: '目标平台，如 wechat，ali',
        alias: 't',
        type: 'string',
        required: true,
        requiresArg: true,
    })
        .option('notify', {
        describe: '编译错误提醒',
        alias: 'n',
        type: 'boolean',
        default: false,
    })
        .option('port', {
        describe: '指定端口号',
        alias: 'p',
        type: 'number',
    })
        .option('analyze', {
        describe: '编译分析',
        alias: 'a',
        type: 'boolean',
        default: false,
    })
        .option('minimize', {
        describe: '最小化文件',
        alias: 'm',
        type: 'boolean',
        default: false,
    })
        .showHelpOnFail(false);
    return exports.cli.parse(args, callback);
}
exports.run = run;
