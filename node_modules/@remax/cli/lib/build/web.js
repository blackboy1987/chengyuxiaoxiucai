"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const webpack_1 = __importDefault(require("webpack"));
const webpack_dev_server_1 = __importDefault(require("webpack-dev-server"));
const detect_port_1 = __importDefault(require("detect-port"));
const config_web_1 = __importDefault(require("./webpack/config.web"));
const address_1 = __importDefault(require("address"));
const output_1 = __importDefault(require("./utils/output"));
const watch_1 = __importDefault(require("./watch"));
function buildWeb(api, options) {
    var _a;
    const webpackOptions = config_web_1.default(api, options);
    const compiler = webpack_1.default(webpackOptions);
    if (options.watch) {
        const designatedPort = (_a = options.port) !== null && _a !== void 0 ? _a : 3000;
        detect_port_1.default(designatedPort, (err, port) => {
            if (err) {
                output_1.default.error(err.message);
                process.exit(1);
            }
            if (designatedPort !== port) {
                output_1.default.warn(` 端口: ${designatedPort} 被占用，系统已分配另一个可用端口：${port}`);
            }
            output_1.default.message('🚀 启动 watch', 'blue');
            output_1.default.message(`📎 http://localhost:${port}`, 'blue');
            output_1.default.message(`📎 http://${address_1.default.ip()}:${port}\n`, 'blue');
            const server = new webpack_dev_server_1.default(compiler, webpackOptions.devServer);
            compiler.hooks.done.tap('web-dev', stats => {
                console.log(stats.toString({
                    colors: true,
                    modules: false,
                    children: false,
                    assets: false,
                    entrypoints: false,
                }));
            });
            server.listen(port, '0.0.0.0', error => {
                if (error) {
                    console.error(error);
                    process.exit(1);
                }
            });
            watch_1.default(options, api, compiler, server);
        });
    }
    else {
        output_1.default.message('🚀 启动 build\n', 'blue');
        compiler.run((error, stats) => {
            if (error) {
                output_1.default.error(error.message);
                throw error;
            }
            const info = stats.toJson();
            if (stats.hasErrors()) {
                info.errors.forEach(error => {
                    output_1.default.error(error);
                });
                process.exit(1);
            }
            if (stats.hasWarnings()) {
                info.warnings.forEach(warning => {
                    output_1.default.warn(warning);
                });
            }
            output_1.default.message('💡 完成', 'green');
        });
    }
    return compiler;
}
exports.default = buildWeb;
