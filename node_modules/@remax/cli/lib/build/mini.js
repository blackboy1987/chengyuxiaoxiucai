"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const webpack_1 = __importDefault(require("webpack"));
const config_mini_1 = __importDefault(require("./webpack/config.mini"));
const output_1 = __importDefault(require("./utils/output"));
const watch_1 = __importDefault(require("./watch"));
function buildMini(api, options) {
    const { target, notify } = options;
    api.registerAdapterPlugins(target, options.one);
    const webpackOptions = config_mini_1.default(api, options, target);
    const compiler = webpack_1.default(webpackOptions);
    if (options.watch) {
        output_1.default.message('🚀 启动 watch\n', 'blue');
        const watcher = compiler.watch({}, (error, stats) => {
            if (error) {
                output_1.default.error(error.message);
                if (notify) {
                    output_1.default.notice(error.message);
                }
                throw error;
            }
            const info = stats.toJson();
            if (stats.hasErrors()) {
                const message = info.errors.join('\n');
                output_1.default.error(message);
                if (notify) {
                    output_1.default.notice(message);
                }
            }
            if (stats.hasWarnings()) {
                console.warn(info.warnings.join('\n'));
            }
            // 适配阿里小程序 IDE
            if (options.target === 'ali') {
                output_1.default.message('Watching for changes...', 'green');
            }
        });
        watch_1.default(options, api, compiler, watcher, true);
    }
    else {
        output_1.default.message('🚀 启动 build\n', 'blue');
        compiler.run((error, stats) => {
            if (error) {
                output_1.default.error(error.message);
                throw error;
            }
            const info = stats.toJson();
            if (stats.hasErrors()) {
                output_1.default.error(info.errors.join('\n'));
                process.exit(1);
            }
            if (stats.hasWarnings()) {
                console.warn(info.warnings.join('\n'));
                return;
            }
        });
    }
    try {
        require('remax-stats').run();
    }
    catch (e) {
        // ignore
    }
    return compiler;
}
exports.default = buildMini;
