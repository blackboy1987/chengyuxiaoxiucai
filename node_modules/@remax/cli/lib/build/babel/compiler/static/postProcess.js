"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("@babel/types"));
const helpers = __importStar(require("./helpers"));
const constants_1 = require("./constants");
function isStubAttribute(attribute) {
    if (t.isJSXSpreadAttribute(attribute)) {
        return false;
    }
    const attrName = attribute.name.name;
    if (attrName === constants_1.TEMPLATE_ID || attrName === constants_1.ENTRY) {
        return false;
    }
    // case: Null
    if (attribute.value === null) {
        return true;
    }
    // case: Literal 属性
    if (t.isLiteral(attribute.value)) {
        return true;
    }
    // case: 表达式
    if (t.isJSXExpressionContainer(attribute.value)) {
        // 同 Literal
        if (t.isLiteral(attribute.value.expression)) {
            return true;
        }
    }
}
/**
 * 判断是否是一个可以 stub 的元素
 *
 * @param {t.JSXElement|t.JSXFragment} node
 * @returns
 */
function isStubElement(node, path) {
    var _a;
    let isSelfStub = false;
    if (t.isJSXFragment(node)) {
        isSelfStub = true;
    }
    if (t.isJSXElement(node)) {
        const name = (_a = node.openingElement.name) === null || _a === void 0 ? void 0 : _a.name;
        if (name === constants_1.STUB_BLOCK) {
            return true;
        }
        if (name === constants_1.EXPRESSION_BLOCK) {
            return false;
        }
        if (!helpers.isHostComponentElement(node, path)) {
            return false;
        }
        const attributes = node.openingElement.attributes;
        isSelfStub = attributes.every(isStubAttribute);
    }
    const isChildrenVoid = node.children.every(c => {
        if (t.isJSXElement(c) || t.isJSXFragment(c)) {
            return isStubElement(c, path);
        }
        if (t.isJSXText(c)) {
            return true;
        }
        if (t.isJSXExpressionContainer(c)) {
            if (t.isLiteral(c.expression)) {
                return true;
            }
        }
        // case: JSXSpreadChild
        return false;
    });
    return isSelfStub && isChildrenVoid;
}
/**
 * 在生成模板后，对 jsx 再处理
 * 用于帮助简化 React 生成 虚拟 dom
 *
 * @export
 * @returns
 */
function postProcess() {
    return {
        visitor: {
            JSXElement: (path) => {
                var _a;
                const node = path.node;
                if (((_a = node.openingElement.name) === null || _a === void 0 ? void 0 : _a.name) === constants_1.STUB_BLOCK) {
                    return;
                }
                // 非 host component 不处理
                if (!helpers.isHostComponentElement(node, path)) {
                    return false;
                }
                // 删除可以被 stub 的属性
                node.openingElement.attributes = node.openingElement.attributes.filter(attr => !isStubAttribute(attr));
                if (isStubElement(node, path)) {
                    helpers.replacedWithStubBlock(path);
                }
            },
        },
    };
}
exports.default = postProcess;
