"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("@babel/types"));
const helpers = __importStar(require("../helpers"));
/**
 * 处理 JSX 中的表达式，使其可数
 *
 * @export
 * @param {NodePath} path
 * @returns
 */
function default_1(path) {
    const node = path.node;
    // 清除空表达式
    if (t.isJSXEmptyExpression(node.expression)) {
        path.remove();
        return;
    }
    // case plain text leaf
    // 父节点被标记为单文本节点的表达式情况
    // 不对表达式做处理
    if (helpers.isPlainTextLeaf(path.parentPath.node, path.parentPath)) {
        return;
    }
    // case block
    // 默认都按照 block 处理，对表达式的节点做遍历渲染
    helpers.wrappedByExpressionBlock(node, path);
}
exports.default = default_1;
