"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("@babel/types"));
const helper_module_imports_1 = require("@babel/helper-module-imports");
const shared_1 = require("@remax/shared");
const getEntries_1 = require("../../getEntries");
function pageConfigExpression(path, id, name) {
    const createId = helper_module_imports_1.addNamed(path, 'createPageConfig', '@remax/runtime');
    const insert = [
        t.exportDefaultDeclaration(t.callExpression(t.identifier('Page'), [t.callExpression(createId, [id, t.stringLiteral(name)])])),
    ];
    if (process.env.NODE_ENV === 'development') {
        insert.unshift(t.expressionStatement(t.assignmentExpression('=', t.memberExpression(id, t.identifier('displayName')), t.stringLiteral(`Page[${name}]`))));
    }
    path.insertAfter(insert);
}
function page(options, api) {
    let skip = false;
    let name = '';
    return {
        pre(state) {
            var _a;
            name = ((_a = getEntries_1.getPages(options, api).find(e => e.filename === shared_1.slash(state.opts.filename))) === null || _a === void 0 ? void 0 : _a.name) || '';
            skip = !name;
        },
        visitor: {
            ExportDefaultDeclaration: (path, state) => {
                if (skip) {
                    return;
                }
                if (t.isExpression(path.node.declaration)) {
                    const pageId = path.scope.generateUidIdentifier('page');
                    const declaration = path.node.declaration;
                    path.replaceWith(t.variableDeclaration('const', [t.variableDeclarator(pageId, declaration)]));
                    pageConfigExpression(path, pageId, name);
                    skip = true;
                }
                else if (t.isFunctionDeclaration(path.node.declaration) || t.isClassDeclaration(path.node.declaration)) {
                    const declaration = path.node.declaration;
                    const pageId = path.scope.generateUidIdentifierBasedOnNode(path.node);
                    declaration.id = pageId;
                    path.replaceWith(declaration);
                    pageConfigExpression(path, pageId, name);
                    skip = true;
                }
            },
            Identifier(path) {
                if (skip) {
                    return;
                }
                // 防止跟小程序的 Page 冲突
                if (path.node.name === 'Page') {
                    path.scope.rename('Page', path.scope.generateUidIdentifier('Page').name);
                    return;
                }
            },
        },
    };
}
exports.default = page;
