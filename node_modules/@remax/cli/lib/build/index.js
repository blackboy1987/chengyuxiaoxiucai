"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = exports.run = void 0;
const plugin_devtools_1 = __importDefault(require("@remax/plugin-devtools"));
const output_1 = __importDefault(require("./utils/output"));
const remaxVersion_1 = __importDefault(require("../remaxVersion"));
const types_1 = require("@remax/types");
const getConfig_1 = __importDefault(require("../getConfig"));
const API_1 = __importDefault(require("../API"));
process.env.NODE_ENV = process.env.NODE_ENV || 'development';
function run(options) {
    const api = new API_1.default();
    const plugins = [...options.plugins];
    if (process.env.NODE_ENV === 'development' && options.target !== types_1.Platform.web) {
        plugins.push(plugin_devtools_1.default());
    }
    api.registerPlugins(plugins);
    if (options.turboPages && options.turboPages.length > 0 && options.target !== types_1.Platform.ali) {
        throw new Error('turboPages 目前仅支持 ali 平台开启');
    }
    api.onBuildStart(options);
    if (options.target === types_1.Platform.web) {
        // 兼容 herbox 所以用 require
        const buildWeb = require('./web').default;
        return buildWeb(api, options);
    }
    else {
        const buildMini = require('./mini').default;
        return buildMini(api, options);
    }
}
exports.run = run;
function build(argv) {
    const { target } = argv;
    process.env.REMAX_PLATFORM = target;
    const _a = getConfig_1.default(), { compressTemplate } = _a, options = __rest(_a, ["compressTemplate"]);
    output_1.default.message(`\n⌨️  Remax v${remaxVersion_1.default()}\n`, 'green');
    output_1.default.message(`🎯 平台 ${target}`, 'blue');
    const result = run(Object.assign(Object.assign(Object.assign({}, options), argv), { compressTemplate: argv.minimize }));
    return result;
}
exports.build = build;
