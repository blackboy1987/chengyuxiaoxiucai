"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const resolve_1 = __importDefault(require("resolve"));
const nativeComponent_1 = require("../../../utils/nativeComponent");
const output_1 = __importDefault(require("../../../utils/output"));
const runWalk = (filePath, components, options) => {
    const walk = (filePath) => {
        const { usingComponents = {} } = require(filePath);
        Object.values(usingComponents).forEach(value => {
            let componentJsPath = '';
            let componentJsonPath = '';
            if (!componentJsPath) {
                const componentPath = nativeComponent_1.getPath(filePath, value);
                componentJsPath = `${componentPath}.js`;
                componentJsonPath = `${componentPath}.json`;
            }
            try {
                componentJsPath = resolve_1.default.sync(value, { basedir: options.cwd });
                componentJsonPath = componentJsPath.replace(/\.js/, '.json');
            }
            catch (_a) {
                // ignore
            }
            if (!fs_1.existsSync(componentJsPath) || !fs_1.existsSync(componentJsonPath)) {
                output_1.default.error(`${componentJsPath} 或 ${componentJsonPath} 不存在`);
                return;
            }
            components.add(componentJsPath);
        });
    };
    walk(filePath);
};
function usingComponents(id, options) {
    const components = new Set();
    const filePath = id.replace(/\.js$/, '.json');
    if (!fs_1.existsSync(filePath)) {
        output_1.default.error(`文件 ${filePath} 不存在`);
        return Array.from(components);
    }
    runWalk(filePath, components, options);
    return Array.from(components);
}
exports.default = usingComponents;
