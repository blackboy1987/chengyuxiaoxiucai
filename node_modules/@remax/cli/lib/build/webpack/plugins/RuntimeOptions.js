"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appClassEvents = exports.pageClassEvents = void 0;
const macro_1 = require("@remax/macro");
const shared_1 = require("@remax/shared");
const modules_1 = __importDefault(require("../../utils/modules"));
const getEntries_1 = require("../../../getEntries");
const webpack_sources_1 = require("webpack-sources");
const PLUGIN_NAME = 'RemaxRuntimeOptionsPlugin';
exports.pageClassEvents = new Map();
exports.appClassEvents = new Map();
class RuntimeOptionsPlugin {
    constructor(options, api) {
        this.remaxOptions = options;
        this.api = api;
    }
    apply(compiler) {
        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation) => {
            compilation.hooks.optimizeChunks.tap(PLUGIN_NAME, chunks => {
                compilation.assets['__remax_runtime_options__.js'] = new webpack_sources_1.OriginalSource(`module.exports = {
          hostComponents: ${this.stringifyHostComponents()},
          pageEvents: ${this.stringifyPageEvents(chunks)},
          appEvents: ${this.stringifyAppEvents()}
        }`, '__remax_runtime_options__.js');
            });
        });
    }
    stringifyPageEvents(chunks) {
        const events = {};
        getEntries_1.getPages(this.remaxOptions, this.api).forEach(page => {
            const chunk = chunks.find(c => {
                return c.name === page.name;
            });
            // TODO: 应该有更好的获取 modules 的方式？
            const modules = modules_1.default(chunk);
            events[page.name] = Array.from(new Set(modules
                .reduce((acc, cur) => {
                return [...acc, ...(macro_1.pageEvents.get(shared_1.slash(cur)) || []), ...(exports.pageClassEvents.get(shared_1.slash(cur)) || [])];
            }, [])
                .sort()));
        });
        return JSON.stringify(events, null, 2);
    }
    stringifyAppEvents() {
        let events = [];
        for (const key of macro_1.appEvents.keys()) {
            // 这里 get 不可能为空
            events = events.concat(Array.from(macro_1.appEvents.get(key)));
        }
        for (const key of exports.appClassEvents.keys()) {
            // 这里 get 不可能为空
            events = events.concat(Array.from(exports.appClassEvents.get(key)));
        }
        return JSON.stringify(Array.from(new Set(events.sort())), null, 2);
    }
    stringifyHostComponents() {
        return JSON.stringify([...macro_1.hostComponents.keys()].reduce((obj, key) => {
            var _a;
            obj[key] = {
                alias: ((_a = macro_1.hostComponents.get(key)) === null || _a === void 0 ? void 0 : _a.alias) || {},
            };
            return obj;
        }, {}), null, 2);
    }
}
exports.default = RuntimeOptionsPlugin;
