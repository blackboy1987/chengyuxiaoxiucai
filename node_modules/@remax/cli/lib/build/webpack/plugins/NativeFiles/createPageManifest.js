"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const shared_1 = require("@remax/shared");
const extensions_1 = require("../../../../extensions");
const readManifest_1 = __importDefault(require("../../../../readManifest"));
const cacheable = __importStar(require("./cacheable"));
const paths_1 = require("../../../utils/paths");
const getUsingComponents_1 = __importDefault(require("./getUsingComponents"));
function createPageManifest(options, page, modules, compilation, api) {
    const rootPath = shared_1.slash(path.join(options.cwd, options.rootDir) + '/');
    const matcher = new RegExp(`(${extensions_1.targetExtensions(options.target).join('|')})$`);
    const manifestPath = page.filename.replace(matcher, '.json').replace(rootPath, '');
    const config = readManifest_1.default(paths_1.pageConfigFile(page.filename, options), options.target);
    const usingComponents = getUsingComponents_1.default(modules, options, compilation);
    config.usingComponents = Object.assign(Object.assign({}, (config.usingComponents || {})), usingComponents);
    const source = JSON.stringify(api.onPageConfig({
        page: page.name,
        config,
    }), null, 2);
    if (!cacheable.invalid(manifestPath, source)) {
        return;
    }
    compilation.assets[manifestPath] = {
        source: () => source,
        size: () => Buffer.byteLength(source),
    };
}
exports.default = createPageManifest;
