"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBaseTemplate = exports.createRenderOptions = void 0;
const path = __importStar(require("path"));
const lodash_1 = require("lodash");
const ejs_1 = __importDefault(require("ejs"));
const shared_1 = require("@remax/shared");
const componentManifest = __importStar(require("../../../../build/babel/componentManifest"));
const UNSAFE_wechatTemplateDepth_1 = require("../../../../defaultOptions/UNSAFE_wechatTemplateDepth");
const cacheable = __importStar(require("./cacheable"));
const getUsingComponents_1 = __importDefault(require("./getUsingComponents"));
const extensions_1 = require("../../../../extensions");
function pageFilename(pagePath, target) {
    const filename = path.basename(pagePath);
    for (const ext of extensions_1.targetExtensions(target)) {
        if (filename.endsWith(ext)) {
            return filename.replace(new RegExp(`${ext}$`), '');
        }
    }
}
function createRenderOptions(api, options, modules, compilation, filter = true) {
    let components = lodash_1.sortBy(componentManifest.values(api), 'id');
    if (filter) {
        const usingComponents = Object.keys(getUsingComponents_1.default(modules, options, compilation));
        components = components.filter(component => component.type !== 'native' || usingComponents.includes(component.id));
    }
    return {
        components,
        slotView: {
            props: [...new Set(componentManifest.SlotView.props || [])].sort(),
        },
    };
}
exports.createRenderOptions = createRenderOptions;
async function createPageTemplate(api, options, modules, pageFile, meta, compilation) {
    const rootDir = path.join(options.cwd, options.rootDir);
    const pagePath = path.relative(rootDir, pageFile);
    const pageDir = path.dirname(pagePath);
    const fileName = shared_1.slash(path.join(pageDir, `${pageFilename(pagePath, options.target)}${meta.template.extension}`));
    const ejsOptions = Object.assign(Object.assign({}, createRenderOptions(api, options, modules, compilation)), { baseTemplate: `/base${meta.template.extension}` });
    if (meta.jsHelper) {
        ejsOptions.jsHelper = `./${pageFilename(pagePath, options.target)}_helper${meta.jsHelper.extension}`;
    }
    let source = await ejs_1.default.renderFile(meta.ejs.page, ejsOptions, {
        rmWhitespace: options.compressTemplate,
    });
    /* istanbul ignore next */
    if (options.compressTemplate) {
        source = source.replace(/^\s*$(?:\r\n?|\n)/gm, '').replace(/\r\n|\n/g, ' ');
    }
    if (!cacheable.invalid(fileName, source)) {
        return;
    }
    compilation.assets[fileName] = {
        source: () => source,
        size: () => Buffer.byteLength(source),
    };
}
exports.default = createPageTemplate;
async function createBaseTemplate(api, options, meta, compilation) {
    if (!meta.ejs.base) {
        return null;
    }
    let source = await ejs_1.default.renderFile(meta.ejs.base, Object.assign(Object.assign({}, createRenderOptions(api, options, [], compilation, false)), { depth: UNSAFE_wechatTemplateDepth_1.ensureDepth(options.UNSAFE_wechatTemplateDepth) }), {
        rmWhitespace: options.compressTemplate,
    });
    /* istanbul ignore next */
    if (options.compressTemplate) {
        source = source.replace(/^\s*$(?:\r\n?|\n)/gm, '').replace(/\r\n|\n/g, ' ');
    }
    const fileName = `base${meta.template.extension}`;
    if (!cacheable.invalid(fileName, source)) {
        return;
    }
    compilation.assets[fileName] = {
        source: () => source,
        size: () => Buffer.byteLength(source),
    };
}
exports.createBaseTemplate = createBaseTemplate;
