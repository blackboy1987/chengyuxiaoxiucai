"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const createAppManifest_1 = __importDefault(require("./createAppManifest"));
const createPageTemplate_1 = __importStar(require("./createPageTemplate"));
const createTurboPageTemplate_1 = __importDefault(require("./createTurboPageTemplate"));
const createPageManifest_1 = __importDefault(require("./createPageManifest"));
const turboPages = __importStar(require("../../../utils/turboPages"));
const modules_1 = __importDefault(require("../../../utils/modules"));
const getEntries_1 = require("../../../../getEntries");
const PLUGIN_NAME = 'RemaxNativeFilesPlugin';
class NativeFilesPlugin {
    constructor(options, api) {
        this.remaxOptions = options;
        this.api = api;
    }
    apply(compiler) {
        compiler.hooks.emit.tapAsync(PLUGIN_NAME, async (compilation, callback) => {
            const options = this.remaxOptions;
            const meta = this.api.getMeta();
            // app.json
            await createAppManifest_1.default(options, this.api, compilation);
            // base template
            await createPageTemplate_1.createBaseTemplate(this.api, options, meta, compilation);
            Promise.all(getEntries_1.getPages(options, this.api).map(async (page) => {
                const chunk = compilation.chunks.find(c => {
                    return c.name === page.name;
                });
                // TODO: 应该有更好的获取 modules 的方式？
                const modules = [...modules_1.default(chunk), page.filename];
                if (turboPages.validate(page.filename, options)) {
                    // turbo page
                    await createTurboPageTemplate_1.default(this.api, options, page.filename, modules, meta, compilation);
                }
                else {
                    // page template
                    await createPageTemplate_1.default(this.api, options, modules, page.filename, meta, compilation);
                }
                await createPageManifest_1.default(options, page, modules, compilation, this.api);
            })).then(() => {
                callback();
            });
        });
    }
}
exports.default = NativeFilesPlugin;
