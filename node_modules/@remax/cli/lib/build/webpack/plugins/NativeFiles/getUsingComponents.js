"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const macro_1 = require("@remax/macro");
const shared_1 = require("@remax/shared");
const nativeComponent_1 = require("../../../utils/nativeComponent");
const NATIVE_COMPONENT_OUTPUT_DIR = 'remaxVendors';
function getNativeComponentAssetOutputPath(sourcePath, options) {
    return (NATIVE_COMPONENT_OUTPUT_DIR +
        '/' +
        shared_1.slash(sourcePath)
            .replace(shared_1.slash(options.cwd) + '/', '')
            .replace(shared_1.slash(options.rootDir) + '/', '')
            .replace(/@/g, '_')
            .replace(/node_modules/g, 'npm'));
}
function getUsingComponents(modules, options, compilation) {
    const components = Array.from(macro_1.nativeComponents.values()).filter(component => component.importers.some(importer => modules.includes(importer)));
    return components.reduce((config, component) => {
        component.assets.forEach(asset => {
            const assetPath = getNativeComponentAssetOutputPath(asset, options);
            const source = fs.readFileSync(asset);
            compilation.assets[assetPath] = {
                source: () => source,
                size: () => Buffer.byteLength(source),
            };
        });
        if (nativeComponent_1.isPluginPath(component.sourcePath)) {
            config[component.id] = component.sourcePath;
        }
        else {
            const usingPath = '/' + getNativeComponentAssetOutputPath(component.sourcePath, options);
            const ext = path.extname(usingPath);
            config[component.id] = usingPath.replace(new RegExp(`\\${ext}$`), '');
        }
        return config;
    }, {});
}
exports.default = getUsingComponents;
