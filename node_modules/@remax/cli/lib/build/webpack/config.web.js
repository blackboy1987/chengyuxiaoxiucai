"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const webpack = __importStar(require("webpack"));
const webpack_chain_1 = __importDefault(require("webpack-chain"));
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const webpack_bundle_analyzer_1 = require("webpack-bundle-analyzer");
const copy_webpack_plugin_1 = __importDefault(require("copy-webpack-plugin"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const webpackbar_1 = __importDefault(require("webpackbar"));
const webpack_virtual_modules_1 = __importDefault(require("webpack-virtual-modules"));
const RemaxPlugins = __importStar(require("./plugins"));
const ejs_1 = __importDefault(require("ejs"));
const types_1 = require("@remax/types");
const extensions_1 = require("../../extensions");
const getEntries_1 = __importDefault(require("../../getEntries"));
const getAppConfig_1 = __importDefault(require("../utils/getAppConfig"));
const css_1 = require("./config/css");
const baseConfig_1 = __importDefault(require("./baseConfig"));
const web_1 = require("../utils/web");
function prepare(options, api) {
    const entries = getEntries_1.default(options, api);
    const appConfig = getAppConfig_1.default(options, api);
    const publicPath = '/';
    return {
        entries,
        appConfig,
        publicPath,
    };
}
function webpackConfig(api, options) {
    const config = new webpack_chain_1.default();
    baseConfig_1.default(config, options, types_1.Platform.web);
    const { entries, appConfig, publicPath } = prepare(options, api);
    config.entry('index').add(web_1.entryName(options));
    config.devtool(process.env.NODE_ENV === 'development' ? 'cheap-module-source-map' : false);
    config.output.publicPath(publicPath);
    config.resolve.extensions.merge(extensions_1.targetExtensions(options.target));
    config.output.filename(process.env.NODE_ENV === 'production' ? '[name].[chunkhash:8].js' : '[name].js');
    config.optimization.runtimeChunk({
        name: 'runtime',
    });
    config.module
        .rule('js')
        .test(extensions_1.moduleMatcher)
        .exclude.add(/\.ejs/)
        .end()
        .use('babel')
        .loader('babel')
        .options({
        reactPreset: true,
        api,
        compact: process.env.NODE_ENV === 'production',
    });
    css_1.cssConfig(config, options, true);
    config.module
        .rule('image')
        .test(/\.(png|jpe?g|gif|svg)$/i)
        .use('file')
        .loader(require.resolve('file-loader'));
    config.module
        .rule('font')
        .test(/\.(ttf|eot|woff|woff2)$/i)
        .use('file')
        .loader(require.resolve('file-loader'));
    const entryTemplate = fs.readFileSync(path.resolve(__dirname, '../../../template/entry.js.ejs'), 'utf-8');
    const virtualModules = new webpack_virtual_modules_1.default({
        [web_1.entryName(options)]: ejs_1.default.render(entryTemplate, {
            pages: web_1.generatePageRoutesInfo(options, entries.pages, api),
            appConfig,
        }),
    });
    config.plugin('webpack-virtual-modules').use(virtualModules);
    const publicDirPath = path.join(options.cwd, 'public');
    if (fs.existsSync(publicDirPath)) {
        config
            .plugin('webpack-copy-plugin')
            .use(copy_webpack_plugin_1.default, [[{ from: publicDirPath, to: path.join(options.cwd, options.output) }]]);
    }
    config.plugin('html-webpack-plugin').use(html_webpack_plugin_1.default, [
        {
            template: fs.existsSync(path.join(publicDirPath, 'index.html'))
                ? path.join(publicDirPath, 'index.html')
                : path.resolve(__dirname, '../../../template/index.html.ejs'),
        },
    ]);
    config.plugin('webpackbar').use(webpackbar_1.default, [{ name: 'web' }]);
    if (options.analyze) {
        config.plugin('webpack-bundle-analyzer').use(webpack_bundle_analyzer_1.BundleAnalyzerPlugin);
    }
    config
        .plugin('remax-web-entry-watcher-plugin')
        .use(RemaxPlugins.WebEntryWatcher, [virtualModules, entryTemplate, options, api]);
    config.plugin('mini-css-extract-plugin').use(mini_css_extract_plugin_1.default, [
        {
            filename: process.env.NODE_ENV === 'production' ? '[name].[chunkhash:8].css' : '[name].css',
        },
    ]);
    const context = {
        config,
        webpack,
        addCSSRule: (ruleConfig) => {
            css_1.addCSSRule(config, options, true, ruleConfig);
        },
    };
    if (typeof options.configWebpack === 'function') {
        options.configWebpack(context);
    }
    api.configWebpack(context);
    const devServer = config.get('devServer') || {};
    config.devServer.publicPath(publicPath);
    config.devServer.compress(true);
    config.devServer.hot(true);
    config.devServer.open(false);
    config.devServer.historyApiFallback(true);
    config.devServer.noInfo(true);
    Object.keys(devServer).forEach(key => {
        config.devServer.set(key, devServer[key]);
    });
    return config.toConfig();
}
exports.default = webpackConfig;
