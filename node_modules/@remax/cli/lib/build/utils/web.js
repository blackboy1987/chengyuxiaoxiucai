"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.entryName = exports.generatePageRoutesInfo = void 0;
const path = __importStar(require("path"));
const shared_1 = require("@remax/shared");
const types_1 = require("@remax/types");
const readManifest_1 = __importDefault(require("../../readManifest"));
const paths_1 = require("./paths");
function generatePageRoutesInfo(options, pages, api) {
    return pages.map(p => {
        const ROOT = shared_1.slash(path.join(options.cwd, options.rootDir)) + '/';
        const configFile = paths_1.pageConfigFile(p.filename, options);
        const config = api.onPageConfig({
            page: p.name,
            config: configFile ? readManifest_1.default(configFile, types_1.Platform.web) : {},
        });
        return {
            originalPath: p.filename,
            route: p.name,
            path: p.filename.replace(ROOT, './'),
            config,
        };
    });
}
exports.generatePageRoutesInfo = generatePageRoutesInfo;
function entryName(options) {
    return `./${options.rootDir}/remax-entry.js`;
}
exports.entryName = entryName;
