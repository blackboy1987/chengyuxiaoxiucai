"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pageConfigFiles = exports.pageConfigFile = exports.appConfigFile = exports.searchJSFile = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const getEntries_1 = __importDefault(require("../../getEntries"));
const extensions_1 = require("../../extensions");
function searchJSFile(file, target) {
    for (const e of extensions_1.targetExtensions(target)) {
        const extFile = file + e;
        if (fs.existsSync(extFile)) {
            return extFile;
        }
    }
    return '';
}
exports.searchJSFile = searchJSFile;
function appConfigFile(options) {
    return searchJSFile(path.join(options.cwd, options.rootDir, 'app.config'), options.target);
}
exports.appConfigFile = appConfigFile;
function pageConfigFile(pageFile, options) {
    const ext = path.extname(pageFile);
    return searchJSFile(pageFile.replace(new RegExp(`\\${ext}$`), '.config'), options.target);
}
exports.pageConfigFile = pageConfigFile;
function pageConfigFiles(options, api) {
    const entries = getEntries_1.default(options, api);
    return entries.pages.map(p => pageConfigFile(p.filename, options));
}
exports.pageConfigFiles = pageConfigFiles;
