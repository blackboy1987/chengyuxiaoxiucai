"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filter = exports.validate = void 0;
const path = __importStar(require("path"));
const shared_1 = require("@remax/shared");
const micromatch_1 = require("micromatch");
const extensions_1 = require("../../extensions");
function validate(route, options) {
    var _a;
    if (!route) {
        return false;
    }
    const page = extensions_1.rename(shared_1.slash(route).replace(shared_1.slash(path.join(options.cwd, options.rootDir)) + '/', ''), '');
    return micromatch_1.isMatch(page, (_a = options.turboPages) !== null && _a !== void 0 ? _a : []);
}
exports.validate = validate;
function filter(pages, options) {
    return pages.filter(p => validate(p.filename, options));
}
exports.filter = filter;
